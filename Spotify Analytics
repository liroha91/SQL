# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL.

SELECT * FROM Spotifydata;

/* What is the average danceability? */
SELECT AVG(danceability)
FROM Spotifydata;
/* Answer: Average danceability has a value of 0.68572. */

/* What songs are above average danceability?
Below average danceability? */
SELECT artist_name, track_name, danceability,
CASE
WHEN danceability > 0.68572 THEN "Above Average"
WHEN danceability = 0.68572 THEN "Average"
WHEN danceability < 0.68572 THEN "Below Average"
END AS "Danceability"
FROM Spotifydata
GROUP BY Danceability;

/* Who are the top 10 artists based on popularity? */
SELECT distinct artist_name, popularity
FROM Spotifydata
GROUP BY popularity
ORDER BY popularity DESC
LIMIT 10;

/* Which artist released the longest song? */
SELECT artist_name, track_name, MAX(duration_ms)
FROM Spotifydata
GROUP BY duration_ms
LIMIT 1;

/* Which song was the most popular with the least energy? */
SELECT artist_name, track_name, MAX(popularity), MIN(energy)
FROM Spotifydata
GROUP BY energy
LIMIT 1;

/* Which song had the most speechiness with the least
popularity? */
SELECT artist_name, track_name, MAX(speechiness), MIN(popularity)
FROM Spotifydata
GROUP BY popularity
LIMIT 1;

/* Which five songs had the highest tempo? */
SELECT artist_name, track_name, tempo
FROM Spotifydata
ORDER BY tempo DESC
LIMIT 5;

/* Which three songs had the highest liveness with the
highest acousticness? */
SELECT artist_name, track_name, MAX(liveness), MAX(acousticness)
FROM Spotifydata
GROUP BY liveness
ORDER BY acousticness DESC
LIMIT 3;

/* What was the least popular song with the least tempo? */
SELECT artist_name, track_name, MIN(popularity), MIN(tempo)
FROM Spotifydata
GROUP BY popularity
LIMIT 1;

# Made use of CTEs to categorize data.

/* Calculate average popularity for artists in Spotify. */
WITH popularity_average_CTE AS (
SELECT s.artist_name, AVG(s.popularity) AS average_popularity
FROM Spotifydata s
GROUP BY s.artist_name
)

/* Avg Popularity of 90+, show name, avg popularity and
label them as Top Star. */

SELECT artist_name, average_popularity, 'Top Star' AS tag
FROM popularity_average_CTE
WHERE average_popularity >= 90;

# In the next practice round, a table is inserted as a hypothetical city planner with regards
to the current condition of bike lanes around the city.

CREATE TABLE BIT_DB.CityBikeLanes (
id integer primary key,
year_installed year not null,
year_updated year not null,
street varchar not null,
width_feet integer not null,
safetyrating integer not null,
protected varchar not null)

INSERT INTO BIT_DB.CityBikeLanes values(1,2012, 2020, "Chestnut",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(2,2016, 2020,"Walnut",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(3,2011, 2020, "Market", 3.5, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(4,2008, 2020,"Locust",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(5,2002, 2020,"South",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(6,2012, 2021, "18th",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(7,2016, 2021,"2nd",4,3.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(8,2011, 2021, "Lombard", 3.5, 2.2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(9,2008, 2021,"Pine",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(10,2002, 2021,"Tasker",4.5,4.8,"no");
INSERT INTO BIT_DB.CityBikeLanes values(11,2012, 2020, "Earp",4,4.1,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(12,2016, 2020,"Titan",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(13,2011, 2020, "Manning", 3.4, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(14,2008, 2020,"Fieldcrest",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(15,2002, 2020,"York",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(16,2012, 2021, "Race",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(17,2016, 2021,"Museum",4,3.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(18,2011, 2021, "Altin", 3.5, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(19,2008, 2021,"Fred",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(20,2002, 2021,"Morris",4.5,4.7,"no");
INSERT INTO BIT_DB.CityBikeLanes values(21,2012, 2020, "Jameson",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(22,2016, 2020,"MLK",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(23,2011, 2020, "Parker", 3.6, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(24,2008, 2020,"Thomas",4,4.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(25,2002, 2020,"Running",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(26,2012, 2021, "Waverly",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(27,2016, 2021,"Addison",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(28,2011, 2021, "Beaver", 3.5, 2.1, "no");
INSERT INTO BIT_DB.CityBikeLanes values(29,2008, 2021,"Kensington",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(30,2002, 2021,"Mouse",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(31,2012, 2020, "Chestnut",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(32,2016, 2020,"Walnut",4,3.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(33,2011, 2020, "Market", 3.8, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(34,2008, 2020,"Locust",4,4.8,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(35,2002, 2020,"South",4.5,4.7,"no");
INSERT INTO BIT_DB.CityBikeLanes values(36,2012, 2021, "18th",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(37,2016, 2021,"2nd",4,3.2,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(38,2011, 2021, "Lombard", 3.5, 2.5, "no");
INSERT INTO BIT_DB.CityBikeLanes values(39,2008, 2021,"Pine",4,5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(40,2002, 2021,"Tasker",4.5,4.3,"no");
INSERT INTO BIT_DB.CityBikeLanes values(41,2012, 2020, "Earp",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(42,2016, 2020,"Titan",4,3.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(43,2011, 2020, "Manning", 3.4, 2.7, "no");
INSERT INTO BIT_DB.CityBikeLanes values(44,2008, 2020,"Fieldcrest",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(45,2002, 2020,"York",4.5,4.4,"no");
INSERT INTO BIT_DB.CityBikeLanes values(46,2012, 2021, "Race",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(47,2016, 2021,"Museum",4,3.4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(48,2011, 2021, "Altin", 3.7, 2, "no");
INSERT INTO BIT_DB.CityBikeLanes values(49,2008, 2021,"Fred",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(50,2002, 2021,"Morris",4.5,4.4,"no");
INSERT INTO BIT_DB.CityBikeLanes values(51,2012, 2020, "Jameson",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(52,2016, 2020,"MLK",4,4,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(53,2011, 2020, "Parker", 3.6, 2.3, "no");
INSERT INTO BIT_DB.CityBikeLanes values(54,2008, 2020,"Thomas",4,4.5,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(55,2002, 2020,"Running",4.5,4.5,"no");
INSERT INTO BIT_DB.CityBikeLanes values(56,2012, 2021, "Waverly",4,4.7,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(57,2016, 2021,"Addison",4,3.6,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(58,2011, 2021, "Beaver", 3.5, 2.5, "no");
INSERT INTO BIT_DB.CityBikeLanes values(59,2008, 2021,"Kensington",4,4.9,"yes");
INSERT INTO BIT_DB.CityBikeLanes values(60,2002, 2021,"Mouse",4.5,4.3,"no");

/* Sample query to get an overview of the data */
SELECT * FROM CityBikeLanes LIMIT 10;

/* When the below query is run, there are two results because two safety inspectors gave
their own ratings. */
SELECT * FROM CityBikeLanes WHERE street = 'Walnut';

/* CTE for list of bike lanes with safety rating of 4 or higher. Include avg
safety rating for each lane and a label that says "Safe Lane" */

WITH bike_lane_CTE AS (
SELECT c.street, AVG(c.safetyrating) AS average_rating
FROM CityBikeLanes c
GROUP BY c.street
)

SELECT street, average_rating, 'Safe Lane' AS tag
FROM bike_lane_CTE
WHERE average_rating >= 4;

/* Window Functions */

SELECT street, safetyrating,
AVG(safetyrating) OVER (PARTITION BY street) AS "Average_safety_rating"
FROM CityBikeLanes;

/* Without a window function... */
SELECT street, safetyrating, AVG(safetyrating)
FROM CityBikeLanes
WHERE street = '2nd'
GROUP BY street, safetyrating;

/* With a window function... */
SELECT street, safetyrating,
AVG(safetyrating) OVER (PARTITION BY street) AS "Avg_Safety_Rating"
FROM CityBikeLanes
WHERE street = '2nd';

/* Listing all bike lanes, both safety ratings for each lane, the
average safety rating for each lane, and a label recommendation as
"Remove" (<=2.5), "Leave-As-Is" (4+ safety rating), or "Improvements
Needed" (All other bike lanes */

SELECT street, safetyrating,
AVG(safetyrating) OVER (PARTITION BY street) AS "Avg_Safety_Rating",
CASE
WHEN AVG(safetyrating) OVER (PARTITION BY street) >= 4 THEN "Leave-As-Is"
WHEN AVG(safetyrating) OVER (PARTITION BY street) <=2.5 THEN "Remove"
ELSE "Improvements Needed"
END AS "Recommendation"
FROM CityBikeLanes;
